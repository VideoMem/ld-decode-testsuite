#!/bin/sh -e
# Test the chroma decoder, capturing the output.

usage () {
	echo >&2 "Usage: $0 [-a] [-n VERSION] [TEST ...]"
	exit 1
}

newonly=false
version=tmp
while getopts "an:" c; do
	case "$c" in
	a)
		newonly=true
		;;
	n)
		version="$OPTARG"
		;;
	\?)
		usage
		;;
	esac
done
shift $(expr $OPTIND - 1)

testsuitedir="$(realpath $(dirname $0))"
testdatadir="$(realpath $testsuitedir/../ld-decode-testdata)"
ldddir="$(realpath $testsuitedir/../ld-decode)"

export PATH="$ldddir/tools/ld-ldstoefm:$PATH"
export LD_LIBRARY_PATH="$ldddir/tools/library:$LD_LIBRARY_PATH"

outdir="$testsuitedir/output/$version"
cachedir="$testsuitedir/cache"
tmpdir="/var/tmp/lddtest"

mkdir -p "$outdir" "$cachedir" "$tmpdir"

(cd "$ldddir" && git log -1) >"$outdir/git-revision.new"
if [ -f "$outdir/git-revision" ]; then
	if ! cmp -s "$outdir/git-revision" "$outdir/git-revision.new"; then
		echo >&2 "Different git revision in $outdir/git-revision"
		exit 1
	fi
fi
mv "$outdir/git-revision.new" "$outdir/git-revision"
commitdate=$(cd "$ldddir" && git log -1 --pretty=%cI)

verbose () {
	echo >&2 ">>> $*"
	"$@"
}

# Check that a .tbc file exists, decoding it from a .lds if not.
make_tbc () {
	tbc="$1"
	lds="$2"
	shift 2

	if [ -f "$tbc" ]; then
		return
	fi

	verbose $ldddir/ld-decode.py "$@" "$lds" "${tbc%.tbc}"
}

# Chroma-decode an NTSC capture.
decode () {
	system="$1"
	lds="$2"
	stillseek="$3"
	use3d="$4"

	if $newonly && [ -f "$outdir/$testname.avi" ]; then
		echo >&2 "Test already done: $testname"
		return
	fi

	rm -f \
		"$outdir/$testname.FAILED" \
		"$outdir/$testname-input.png" \
		"$outdir/$testname-output.png" \
		"$outdir/$testname.avi"

	case "$system" in
	ntsc)
		inputsize=910x525
		if [ "$commitdate" '<' 2019-05-05 ]; then
			# Pre ebf68032f3b9653c9a660749e8d21c414f181cae
			outputsize=754x486
		else
			outputsize=760x488
		fi
		fps=30
		lddargs="--ntsc"
		;;
	pal)
		inputsize=1135x625
		if [ "$commitdate" '<' 2019-05-05 ]; then
			outputsize=922x576
		else
			outputsize=928x576
		fi
		fps=25
		lddargs="--pal"
		;;
	esac

	case "$lds" in
	*.r8)
		lddargs="$lddargs -f 8fsc --daa"
		;;
	esac

	tbc="$cachedir/$testname.tbc"
	rgb="$tmpdir/$testname.rgb"
	make_tbc "$tbc" "$lds" $lddargs

	if [ -f "$ldddir/tools/ld-comb-$system/main.cpp" ]; then
		decoder="$ldddir/tools/ld-comb-$system/ld-comb-$system"
		if [ -n "$use3d" ]; then
			decoder="$decoder --3d"
		fi
	else
		decoder="$ldddir/tools/ld-chroma-decoder/ld-chroma-decoder"
		if [ -n "$use3d" ]; then
			decoder="$decoder -f ${system}3d"
		fi
	fi
	if [ "$use3d" = "3dmap" ]; then
		decoder="$decoder --oftest"
	fi
	if ! verbose $decoder "$tbc" "$rgb"; then
		touch "$outdir/$testname.FAILED"
		return
	fi

	ffmpeg="ffmpeg -loglevel error -y"
	ffmpegout="$ffmpeg -f rawvideo -r $fps -pix_fmt rgb48 -s $outputsize"

	# Extract only one frame for still images (seeking first for 3D).
	still=
	if [ -n "$stillseek" ]; then
		still="$still -ss $stillseek"
	fi
	still="$still -t 0.021"

	$ffmpeg $still -f rawvideo -r 30 -pix_fmt gray16 -s $inputsize \
		-i $tbc "$outdir/$testname-input.png"
	$ffmpegout $still -i $rgb "$outdir/$testname-output.png"
	$ffmpegout -i $rgb -b:v 15000k -aspect 4:3 \
		-vcodec mpeg4 -flags +ilme+ildct \
		"$outdir/$testname.avi"
}

all_tests="snellwilcox snellwilcox3d 3dmap1 3dmap2 testcardg ntscbars palbars leon"
run_test () {
	testname="$1"

	case "$testname" in
	snellwilcox)
		# Snell & Wilcox test pattern from "Video Essentials"
		decode ntsc "$testdatadir/ve-snw-cut.lds"
		;;
	snellwilcox3d)
		# Snell & Wilcox test pattern from "Video Essentials"
		decode ntsc "$testdatadir/ve-snw-cut.lds" 0.5 3d
		;;
	3dmap1)
		# 3D map -- this should have motion
		decode ntsc "$testdatadir/ve-snw-cut.lds" 0.1 3dmap
		;;
	3dmap2)
		# 3D map -- this should be still
		decode ntsc "$testdatadir/ve-snw-cut.lds" 0.5 3dmap
		;;
	testcardg)
		# BBC Test Card G from "Jason and the Argonauts"
		decode pal "$testdatadir/pal/jason-testpattern.lds"
		;;
	ntscbars)
		# SMPTE colour bars from GGV1069
		decode ntsc "$testdatadir/ggv_cbar_5500-v2800.lds"
		;;
	palbars)
		# BBC colour bars from "Jason and the Argonauts"
		decode pal "$testdatadir/pal/jason-cbar1.lds"
		;;
	leon)
		# A few seconds from "Leon", captured noisily with cxadc
		decode pal "/n/stuff2/capture/laserdisc/cap.leon.r8"
		;;
	esac
}

if [ $# -eq 0 ]; then
	for testname in $all_tests; do
		run_test "$testname"
	done
else
	for testname in "$@"; do
		run_test "$testname"
	done
fi
