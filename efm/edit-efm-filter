#!/usr/bin/python3
# Interactively edit EFM filter parameters and view the results.

# XXX Draw eye diagram, or histogram of zero crossing lengths
# XXX Run decoder in the background

import gi
import matplotlib.backends.backend_gtk3cairo
import matplotlib.figure
import numpy as np
import scipy.interpolate as spi
import scipy.signal as sps
import sys

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk

from efmfilter import SAMPLE_RATE, FFTFilter

class InputFile:
    """A .s16 RF sample that can be decoded."""

    def __init__(self, filename):
        self.filename = filename
        # mmap the file to avoid loading it all into memory
        self.data = np.memmap(filename=filename, dtype=np.int16, mode="r")

        self.offset = 2000

class GUI:
    """The GUI and its state."""

    def __init__(self, args):
        self.chart_length = 1000

        self.fft = FFTFilter()

        # Generate simple LPF for the "before" chart
        self.lpf_b, self.lpf_a = sps.firwin(numtaps=31, cutoff=2.0e6, fs=SAMPLE_RATE), [1.0]

        # Command-line args are input filenames
        self.files = [InputFile(arg) for arg in args]
        assert len(self.files) > 0
        self.current_file = self.files[0]

        # Main window
        window = Gtk.Window()
        # XXX keybinding for quit
        window.connect("delete-event", Gtk.main_quit)

        # Grid layout
        grid = Gtk.Grid()
        window.add(grid)
        grid_w = 2

        # matplotlib charts
        # XXX remove padding
        figure = matplotlib.figure.Figure()
        nrows, ncols = 2, 1
        self.before_ax = figure.add_subplot(nrows, ncols, 1)
        self.after_ax = figure.add_subplot(nrows, ncols, 2)
        self.canvas = matplotlib.backends.backend_gtk3cairo.FigureCanvasGTK3Cairo(figure)
        self.canvas.set_size_request(1000 * ncols, 200 * nrows)
        grid.attach(self.canvas, 0, 0, grid_w, 1)

        row_count = [1]
        def add_scale(name):
            label = Gtk.Label.new(name)
            grid.attach(label, 0, row_count[0], 1, 1)

            scale = Gtk.Scale.new(Gtk.Orientation.HORIZONTAL)
            scale.set_hexpand(True)
            scale.set_value_pos(Gtk.PositionType.RIGHT)
            grid.attach(scale, 1, row_count[0], 1, 1)

            row_count[0] += 1
            return scale

        # Chart navigation widgets
        self.offset_scale = add_scale("File offset")
        self.offset_scale.connect("value-changed", self.offset_changed)

        # Equaliser widgets
        self.freqs = np.linspace(0.0e6, 2.0e6, num=11)
        self.amp_scales = []
        for freq in self.freqs:
            scale = add_scale("Amplitude %.1f MHz" % (freq / 1.0e6))
            scale.set_range(0.0, 1.5)
            scale.set_value(1.0)
            scale.set_round_digits(2)
            scale.connect("value-changed", self.eq_changed)
            self.amp_scales.append(scale)
        self.phase_scales = []
        for freq in self.freqs:
            scale = add_scale("Phase %.1f MHz" % (freq / 1.0e6))
            scale.set_range(-np.pi, np.pi)
            scale.set_value(0.0)
            scale.set_round_digits(2)
            scale.connect("value-changed", self.eq_changed)
            self.phase_scales.append(scale)

        # Update all the dynamic bits and show the window
        self.update_file()
        self.update_filter()
        window.show_all()

    def offset_changed(self, widget, user_data=None):
        self.current_file.offset = int(widget.get_value())
        self.update_filter()

    def eq_changed(self, widget, user_data=None):
        self.update_filter()

    def update_file(self):
        """Update the GUI for a change in input file."""

        # XXX Limit how far the user can scroll -- else it's a bit unwieldy!
        input_len = min(len(self.current_file.data), 10 * self.chart_length)
        self.offset_scale.set_range(0, input_len - self.chart_length)
        self.offset_scale.set_value(self.current_file.offset)

    def update_filter(self):
        """Update the GUI for a change in filter parameters."""
        # XXX Do this asynchronously

        start_pos = self.current_file.offset
        end_pos = start_pos + self.chart_length
        input_data = self.current_file.data[start_pos:end_pos]
        x_range = range(start_pos, end_pos)

        # Filter and plot the "before" chart
        before_data = sps.lfilter(self.lpf_b, self.lpf_a, input_data)
        self.before_ax.clear()
        self.before_ax.plot(x_range, before_data)

        # Generate the frequency-domain coefficients by cubic interpolation between the equaliser values.
        # Anything above the highest frequency is left as zero.
        a_values = [w.get_value() for w in self.amp_scales]
        a_interp = spi.interp1d(self.freqs, [w.get_value() for w in self.amp_scales], kind="cubic")
        p_interp = spi.interp1d(self.freqs, [w.get_value() for w in self.phase_scales], kind="cubic")
        ap_filter = np.zeros(self.fft.complex_size, dtype=np.complex)
        for i in range(int(self.freqs[-1] / self.fft.freq_per_bin)):
            freq = i * self.fft.freq_per_bin
            a = a_interp(freq)
            p = p_interp(freq)

            # Scale by the amplitude, rotate by the phase
            ap_filter[i] = a * (np.cos(p) + (complex(0, -1) * np.sin(p)))

        # Filter and plot the "after" chart
        def freqfunc(comp):
            comp *= ap_filter
        after_data = self.fft.apply(input_data, freqfunc)
        self.after_ax.clear()
        self.after_ax.plot(x_range, after_data)

        # Tweak appearance of both charts
        for ax in (self.before_ax, self.after_ax):
            ax.grid(True)

        self.canvas.draw()

    def main(self):
        Gtk.main()

if __name__ == "__main__":
    gui = GUI(sys.argv[1:])
    gui.main()
