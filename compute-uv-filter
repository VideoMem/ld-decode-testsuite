#!/usr/bin/python3
# Compute and display the response of a FIR UV postfilter for Transform PAL.
#
# Richard Russell provided the parameters below from paldecc.fir, along with
# the response computed by FIRBBC (which matches what this produces, since it
# uses the same algorithm as sps.remez).

import collections
import numpy as np
import scipy.signal as sps
import matplotlib.pyplot as plt

fSC = 4433618.75
rate = 4 * fSC

Filter = collections.namedtuple('Filter', ['name', 'coeffs'])
filters = []

# Add the filters to compare
for taps in [15, 16, 17]:
    coeffs = sps.remez(taps,
                       [0.0, 2.15e6, 4.6e6, rate / 2],
                       [1.0,         0.0],
                       [1.0,         1.0],
                       fs=rate)
    filters.append(Filter('remez', coeffs))

fig, (linax, logax, grpax) = plt.subplots(3)

for fil in filters:
    print('%s <%d> = {' % (fil.name, len(fil.coeffs)))
    for i in range(0, len(fil.coeffs), 5):
        print('    ', ' '.join(str(c) + ',' for c in fil.coeffs[i:i+5]))
    print('};')

    w, h = sps.freqz(fil.coeffs, fs=rate)
    linax.plot(w, np.abs(h))
    logax.plot(w, 20 * np.log10(np.abs(h)))
    dw, d = sps.group_delay((fil.coeffs, 1), w, fs=rate)
    grpax.plot(dw, d)

for ax in (linax, logax, grpax):
    ax.legend(['%s <%d>' % (fil.name, len(fil.coeffs)) for fil in filters])
    ax.set_xlabel('Frequency')
    ax.set_xlim(0, rate / 2)
    ax.grid(True)
linax.set_ylabel('Magnitude response (linear)')
logax.set_ylabel('Magnitude response (dB)')
grpax.set_ylabel('Group delay (samples)')

plt.show()
