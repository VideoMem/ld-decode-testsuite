#!/bin/bash -e
# Run through the entire decoding process.

# FIXME: Option to split analogue tracks
# FIXME: Detect CX decoding automatically
# FIXME: Detect audio configuration automatically from the VBI
# FIXME: Do this with short PAL/NTSC CAV/CLV examples with -fsanitize={undefined,address}...
# FIXME: Clean up intermediate files (.map) once complete
# FIXME: Extract CC or Teletext subtitles from the VBI

usage () {
	cat >&2 <<EOF
Usage: $0 [options] INPUT-FILE [OUTPUT-BASE]
$0 - Decode a LaserDisc image using ld-decode's tools

Options:
  -p               Disc has PAL video (default NTSC)
  -A               Disc has no analogue audio
  -D               Disc has no digital audio
  -3               Disc has AC3 audio (and no right analogue channel)
  -c               Use ld-dropout-correct
  -m               Use ld-discmap
  -V               Do everything except final encoding step
  -s FRAMES        Skip initial frames (ld-decode.py -s FRAMES)
  -f DECODER       Select chroma decoder (ld-chroma-decoder -f DECODER)
  -n               Dry-run mode; show what will be done

INPUT-FILE is the RF capture, typically a .lds file.

OUTPUT-BASE is the basename of the output files; if INPUT-FILE is
"sample.lds", it will default to "out/sample".
EOF
	exit 1
}

testsuitedir="$(dirname $(realpath $0))"

ac3=false
analogue=true
digital=true
dropouts=false
decoder=
discmap=false
dryrun=false
standard=ntsc
lddargs=()
noencode=false
while getopts "3Acf:Dmnps:V" c; do
	case "$c" in
	3)
		ac3=true
		;;
	A)
		analogue=false
		;;
	c)
		dropouts=true
		;;
	f)
		decoder="$OPTARG"
		;;
	D)
		digital=false
		;;
	m)
		discmap=true
		;;
	n)
		dryrun=true
		;;
	p)
		standard=pal
		;;
	s)
		lddargs+=(-s "$OPTARG")
		;;
	V)
		noencode=true
		;;
	\?)
		usage
		;;
	esac
done
shift $(expr $OPTIND - 1)

if [ "$#" = 1 ]; then
	infile="$1"
	out=$(dirname "$1")/out/$(echo "$1" | sed 's/\.\(lds\|ldf\|r8\|r16\|raw\.oga\)$//')
elif [ "$#" = 2 ]; then
	infile="$1"
	out="$2"
else
	usage
fi

if $analogue && $digital && [ "$standard" = pal ]; then
	echo >&2 "PAL can't have both analogue and digital audio"
	exit 1
fi
if $ac3 && [ "$standard" = pal ]; then
	echo >&2 "PAL can't have AC3"
	exit 1
fi

action () {
	if $dryrun; then
		echo >&2 "Would do:" "$@"
		return
	fi

	echo >&2 ">>>" "$@"
	case "$1" in
	ld-decode.py)
		"$@" 2>&1 | tee "$out".decode.log
		;;
	ld-process-efm)
		"$@" 2>&1 | tee "$out".efm.log
		;;
	ld-discmap)
		"$@" 2>&1 | tee "$out".discmap.log
		;;
	*)
		"$@"
		;;
	esac
}

if [ ! -f "$out.tbc" ]; then
	action ld-decode.py "--$standard" "${lddargs[@]}" "$infile" "$out"
fi

# Parse audio parameters from the .json.
eval $(python3 -c '
import json
import sys

with open(sys.argv[1]) as f:
    j = json.load(f)

analogue_params = [
    "-t", "raw",
    "-e", "signed" if j["pcmAudioParameters"]["isSigned"] else "unsigned",
    "-L" if j["pcmAudioParameters"]["isLittleEndian"] else "-B",
    "-b", str(j["pcmAudioParameters"]["bits"]),
    "-r", str(j["pcmAudioParameters"]["sampleRate"]),
    "-c", "2",
    ]

print("analogue_params=\"%s\"" % " ".join(analogue_params))
' "$out.tbc.json")

if [ ! -f "$out.tbc.json.orig" ]; then
	# ld-process-vbi doesn't produce a new file. Careful, because:
	# - we might need to restart this if ld-process-vbi fails;
	# - the .json might be a symlink, in which case we shouldn't clobber
	#   the target.
	if [ ! -f "$out.tbc.json.orig_" ]; then
		action mv "$out.tbc.json" "$out.tbc.json.orig_"
	fi
	action cp "$out.tbc.json.orig_" "$out.tbc.json"
	action ld-process-vbi -n "$out.tbc"
	action mv "$out.tbc.json.orig_" "$out.tbc.json.orig"
fi

if [ ! -f "$out.ffmetadata" ]; then
	action "$testsuitedir/decode-vbi" --metadata "$out.ffmetadata" "$out.tbc.json"
fi

if $digital && [ ! -f "$out.digital.pcm" ]; then
	action ld-process-efm --noninteractive "$out".efm "$out".digital.pcm
fi

if $digital && [ ! -f "$out.digital.flac" ]; then
	effects=()
	# Assume the whole digital audio stream needs de-emphasis if
	# ld-process-efm found more than a handful of preemphasised frames.
	preemp_frames=$( (grep 'Total Preemp Frames' "$out".efm.log || echo ':0') | sed -e 's/.*: *//' -e 'q')
	if [ "$preemp_frames" -gt 10 ]; then
		effects+=(deemph)
	fi
	effects+=(stats)

	action sox \
		-t raw -e signed -b 16 -r 44100 -c 2 "$out".digital.pcm \
		"$out".digital.flac \
		"${effects[@]}"
fi

if $analogue && [ ! -f "$out.analogue.flac" ]; then
	effects=()
	if $ac3; then
		# Drop the right channel.
		effects+=(remix 1)
	fi
	effects+=(stats)

	action sox \
		$analogue_params "$out.pcm"  \
		"$out".analogue.flac \
		"${effects[@]}"
fi

# Look for a manually-added audio track (e.g. a separate audio capture, or an
# equivalent from a different release).
extraaudio=false
if [ -f "$out.extra.flac" ]; then
	extraaudio=true
fi

prevtbc="$out".tbc

if $discmap; then
	if [ ! -f "$out.map" ]; then
		action ld-discmap "$prevtbc" "$out".map
	fi
	prevtbc="$out".map
fi

if $noencode; then
	exit 0
fi

if [ ! -f "$out.mkv" ]; then
	if $dropouts; then
		doccmd=(ld-dropout-correct --overcorrect)
		doccmd+=(--output-json "$out".doc.json "$prevtbc" -)
	else
		doccmd=(cat "$prevtbc")
	fi

	chcmd=(ld-chroma-decoder)
	if [ -n "$decoder" ]; then
		chcmd+=(-f "$decoder")
	fi
	chcmd+=(--input-json "$prevtbc.json" - -)

	ffcmd=(ffmpeg -f rawvideo -pix_fmt rgb48)
	if [ "$standard" = pal ]; then
		ffcmd+=(-r 25 -s 928x576)
	else
		ffcmd+=(-r 30000/1001 -s 760x488)
	fi
	ffcmd+=(-i -)
	streams=0
	if $digital; then
		ffcmd+=(-i "$out".digital.flac)
		digstream=$streams
		streams=$(($streams + 1))
	fi
	if $analogue; then
		ffcmd+=(-i "$out".analogue.flac)
		anastream=$streams
		streams=$(($streams + 1))
	fi
	if $extraaudio; then
		ffcmd+=(-i "$out".extra.flac)
		extrastream=$streams
		streams=$(($streams + 1))
	fi
	ffcmd+=(-i "$out".ffmetadata)
	metadatastream=$streams
	for i in $(seq 0 $streams); do
		ffcmd+=(-map $i:0)
	done
	ffcmd+=(-map_metadata $metadatastream)
	# Use yuvj444p for full range and no chroma subsampling.
	ffcmd+=( \
		-pix_fmt yuvj444p \
		-filter:v setfield=tff \
		-codec:v libx264 -crf 16 -flags +ildct+ilme -aspect 4:3 \
	)
	if $digital; then
		ffcmd+=(-codec:a:$digstream copy)
	fi
	if $analogue; then
		ffcmd+=(-codec:a:$anastream copy)
	fi
	if $extraaudio; then
		ffcmd+=(-codec:a:$extrastream copy)
	fi
	ffcmd+=(-y "$out".mkv)

	action "${doccmd[@]}" | \
	action "${chcmd[@]}" | \
	action "${ffcmd[@]}"
fi
